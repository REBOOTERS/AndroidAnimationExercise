// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    apply from: file('config.gradle')
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven {
            url('repo')
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$gradle_version"
        classpath "com.alibaba:arouter-register:$arouter_register"
//        classpath "com.engineer.plugin:phoenix:1.0.7"
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }


}

//plugins {
//    id 'com.gradle.build-scan' version '3.3.3'
//}
//buildScan {
//    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
//    termsOfServiceAgree = 'yes'
//}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven {
            url('repo')
        }
        maven { url 'https://jitpack.io' }
    }

    tasks.whenTaskAdded {
        tasks.each { task ->
//            println("task name==" + task.name)
//            if (task.name.contains("Test") || task.name.contains("test")) {
//                task.enabled = false
//            }
//            if (task.name.contains("lint") || task.name.contains("Lint")) {
//                task.enabled = false
//            }
//            if (task.name.contains("Release") || task.name.contains("release")) {
//                task.enabled = false
//            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
    delete rootDir.toString() + File.separator + apkDir
    delete rootDir.toString() + File.separator + "repo"
}

subprojects { sub ->
    sub.beforeEvaluate {
        project
        println "#### Evaluate before of " + project.path
    }

    sub.afterEvaluate {
        project
        println "#### Evaluate after of " + project.path
    }
}

allprojects {
    tasks.withType(Test).configureEach {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        if (!project.hasProperty("createReports")) {
            reports.html.required = false
            reports.junitXml.required = false
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "4000"
            options.compilerArgs << "-Xmaxwarns" << "4000"
        }
    }
}